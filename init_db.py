from vector_storage import VectorDB
import json
from pathlib import Path


def initialize_vector_db(emb_model):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
    db = VectorDB(emb_model, persist_dir="./vector_db")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    stats = db.get_stats()
    if stats['total_documents'] > 0:
        print(f"‚ö†Ô∏è  –ë–î —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {stats['total_documents']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        response = input("–û—á–∏—Å—Ç–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): ")
        if response.lower() == 'y':
            db.delete_all()
        else:
            return db
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ data.json (—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ make_data.ipynb)
    if Path("model_creating/data.json").exists():
        print('–ü—É—Ç—å –ë–î')
        db.load_documents_from_json("model_creating/data.json")
    else:
        print("‚ùå –§–∞–π–ª data.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ make_data.ipynb")
        return None
    
    return db

# if __name__ == "__main__":
#     db = initialize_vector_db()
#
#     if db:
#         # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
#         print("\nüîç –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫:")
#         test_query = "—É—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"
#         results = db.search(test_query, k=3)
#
#         for i, result in enumerate(results, 1):
#             print(f"\n{i}. –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {(1-result['distance'])*100:.1f}%")
#             print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result['metadata'].get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
#             print(f"   –¢–µ–∫—Å—Ç: {result['text'][:200]}...")
            